import { ChatApi } from './chat-api.js';
import { ChatMessageEvent } from './events.js';
import { Logger } from './logger.js';
import { Message, MessageHeaders, MessageMetadata, MessageOperationMetadata } from './message.js';
import { MessagesReactions } from './messages-reactions.js';
import { PaginatedResult } from './query.js';
import { MessageOptions } from './room-options.js';
import { Serial } from './serial.js';
import { Subscription } from './subscription.js';
import * as Ably from 'ably';
/**
 * The order in which results should be returned when performing a paginated query (e.g. message history).
 */
export declare enum OrderBy {
    /**
     * Return results in ascending order (oldest first).
     */
    OldestFirst = "oldestFirst",
    /**
     * Return results in descending order (newest first).
     */
    NewestFirst = "newestFirst"
}
/**
 * Options for querying messages in a chat room.
 */
export interface QueryOptions {
    /**
     * The start of the time window to query from. If provided, the response will include
     * messages with timestamps equal to or greater than this value.
     *
     * @defaultValue The beginning of time
     */
    start?: number;
    /**
     * The end of the time window to query from. If provided, the response will include
     * messages with timestamps less than this value.
     *
     * @defaultValue Now
     */
    end?: number;
    /**
     * The maximum number of messages to return in the response.
     *
     * @defaultValue 100
     */
    limit?: number;
    /**
     * The direction to query messages in.
     * If {@link OrderBy.OldestFirst}, the response will include messages from the start of the time window to the end.
     * If {@link OrderBy.NewestFirst}, the response will include messages from the end of the time window to the start.
     * If not provided, the default is {@link OrderBy.NewestFirst}.
     *
     * @defaultValue {@link OrderBy.NewestFirst}
     */
    orderBy?: OrderBy;
}
/**
 * The parameters supplied to a message action like delete or update.
 */
export interface OperationDetails {
    /**
     * Optional description for the message action.
     */
    description?: string;
    /**
     * Optional metadata that will be added to the action. Defaults to empty.
     *
     */
    metadata?: MessageOperationMetadata;
}
/**
 * Parameters for updating a message.
 */
export interface UpdateMessageParams {
    /**
     * The new text of the message.
     */
    text: string;
    /**
     * Optional metadata of the message.
     */
    metadata?: MessageMetadata;
    /**
     * Optional headers of the message.
     */
    headers?: MessageHeaders;
}
/**
 * Parameters for deleting a message.
 */
export interface DeleteMessageParams extends OperationDetails {
}
/**
 * Params for sending a text message. Only `text` is mandatory.
 */
export interface SendMessageParams {
    /**
     * The text of the message.
     */
    text: string;
    /**
     * Optional metadata of the message.
     *
     * The metadata is a map of extra information that can be attached to chat
     * messages. It is not used by Ably and is sent as part of the realtime
     * message payload. Example use cases are setting custom styling like
     * background or text colors or fonts, adding links to external images,
     * emojis, etc.
     *
     * Do not use metadata for authoritative information. There is no server-side
     * validation. When reading the metadata, treat it like user input.
     *
     */
    metadata?: MessageMetadata;
    /**
     * Optional headers of the message.
     *
     * The headers are a flat key-value map and are sent as part of the realtime
     * message's extras inside the `headers` property. They can serve similar
     * purposes as the metadata, but they are read by Ably and can be used for
     * features such as
     * [subscription filters](https://faqs.ably.com/subscription-filters).
     *
     * Do not use the headers for authoritative information. There is no
     * server-side validation. When reading the headers, treat them like user
     * input.
     *
     */
    headers?: MessageHeaders;
}
/**
 * A listener for message events in a chat room.
 * @param event The message event that was received.
 */
export type MessageListener = (event: ChatMessageEvent) => void;
/**
 * A response object that allows you to control a message subscription.
 */
export interface MessageSubscriptionResponse extends Subscription {
    /**
     * Get the previous messages that were sent to the room before the listener was subscribed.
     *
     * If the client experiences a discontinuity event (i.e. the connection was lost and could not be resumed), the starting point of
     * historyBeforeSubscribe will be reset.
     *
     * Calls to historyBeforeSubscribe will wait for continuity to be restored before resolving.
     *
     * Once continuity is restored, the subscription point will be set to the beginning of this new period of continuity. To
     * ensure that no messages are missed, you should call historyBeforeSubscribe after any period of discontinuity to
     * fill any gaps in the message history.
     *
     * ```typescript
     * const { historyBeforeSubscribe } = room.messages.subscribe(listener);
     * await historyBeforeSubscribe({ limit: 10 });
     * ```
     *
     * @param params Options for the history query.
     * @returns A promise that resolves with the paginated result of messages, in newest-to-oldest order.
     */
    historyBeforeSubscribe(params: Omit<QueryOptions, 'orderBy'>): Promise<PaginatedResult<Message>>;
}
/**
 * This interface is used to interact with messages in a chat room: subscribing
 * to new messages, fetching history, or sending messages.
 *
 * Get an instance via {@link Room.messages}.
 */
export interface Messages {
    /**
     * Subscribe to new messages in this chat room.
     * @param listener callback that will be called
     * @returns A response object that allows you to control the subscription.
     */
    subscribe(listener: MessageListener): MessageSubscriptionResponse;
    /**
     * Get messages that have been previously sent to the chat room, based on the provided options.
     *
     * @param options Options for the query.
     * @returns A promise that resolves with the paginated result of messages. This paginated result can
     * be used to fetch more messages if available.
     */
    history(options: QueryOptions): Promise<PaginatedResult<Message>>;
    /**
     * Send a message in the chat room.
     *
     * This method uses the Ably Chat API endpoint for sending messages.
     *
     * Note that the Promise may resolve before OR after the message is received
     * from the realtime channel. This means you may see the message that was just
     * sent in a callback to `subscribe` before the returned promise resolves.
     *
     * @param params an object containing {text, headers, metadata} for the message
     * to be sent. Text is required, metadata and headers are optional.
     * @returns A promise that resolves when the message was published.
     */
    send(params: SendMessageParams): Promise<Message>;
    /**
     * Delete a message in the chat room.
     *
     * This method uses the Ably Chat API REST endpoint for deleting messages.
     * It performs a `soft` delete, meaning the message is marked as deleted.
     *
     * Note that the Promise may resolve before OR after the message is deleted
     * from the realtime channel. This means you may see the message that was just
     * deleted in a callback to `subscribe` before the returned promise resolves.
     *
     * NOTE: The Message instance returned by this method is the state of the message as a result of the delete operation.
     * If you have a subscription to message events via `subscribe`, you should discard the message instance returned by
     * this method and use the event payloads from the subscription instead.
     *
     * Should you wish to restore a deleted message, and providing you have the appropriate permissions,
     * you can simply send an update to the original message.
     * Note: This is subject to change in future versions, whereby a new permissions model will be introduced
     * and a deleted message may not be restorable in this way.
     *
     * @returns A promise that resolves when the message was deleted.
     * @param serial - A string or object that conveys the serial of the message to delete.
     * @param deleteMessageParams - Optional details to record about the delete action.
     * @return A promise that resolves to the deleted message.
     */
    delete(serial: Serial, deleteMessageParams?: DeleteMessageParams): Promise<Message>;
    /**
     * Update a message in the chat room.
     *
     * Note that the Promise may resolve before OR after the updated message is
     * received from the realtime channel. This means you may see the update that
     * was just sent in a callback to `subscribe` before the returned promise
     * resolves.
     *
     * NOTE: The Message instance returned by this method is the state of the message as a result of the update operation.
     * If you have a subscription to message events via `subscribe`, you should discard the message instance returned by
     * this method and use the event payloads from the subscription instead.
     *
     * This method uses PUT-like semantics: if headers and metadata are omitted from the updateParams, then
     * the existing headers and metadata are replaced with the empty objects.
     *
     * @param serial - A string or object that conveys the serial of the message to update.
     * @param updateParams - The parameters for updating the message.
     * @param details - Optional details to record about the update action.
     * @returns A promise of the updated message.
     */
    update(serial: Serial, updateParams: UpdateMessageParams, details?: OperationDetails): Promise<Message>;
    /**
     * Add, delete, and subscribe to message reactions.
     */
    reactions: MessagesReactions;
}
/**
 * @inheritDoc
 */
export declare class DefaultMessages implements Messages {
    private readonly _roomName;
    private readonly _options;
    private readonly _channel;
    private readonly _chatApi;
    private readonly _clientId;
    private readonly _listenerSubscriptionPoints;
    private readonly _logger;
    private readonly _emitter;
    readonly reactions: MessagesReactions;
    /**
     * Constructs a new `DefaultMessages` instance.
     * @param roomName The unique identifier of the room.
     * @param channel An instance of the Realtime channel for the room.
     * @param chatApi An instance of the ChatApi.
     * @param clientId The client ID of the user.
     * @param logger An instance of the Logger.
     */
    constructor(roomName: string, options: MessageOptions, channel: Ably.RealtimeChannel, chatApi: ChatApi, clientId: string, logger: Logger);
    /**
     * Sets up channel subscriptions for messages.
     */
    private _applyChannelSubscriptions;
    /**
     * @inheritdoc Messages
     */
    private _getBeforeSubscriptionStart;
    /**
     * Handle the case where the channel experiences a detach and reattaches.
     */
    private _handleAttach;
    /**
     * Create a promise that resolves with the attachSerial of the channel or the serial of the latest message.
     */
    private _resolveSubscriptionStart;
    private _getChannelProperties;
    private _subscribeAtChannelAttach;
    /**
     * @inheritdoc Messages
     */
    history(options: QueryOptions): Promise<PaginatedResult<Message>>;
    /**
     * @inheritdoc Messages
     */
    send(params: SendMessageParams): Promise<Message>;
    /**
     * @inheritdoc Messages
     */
    delete(serial: Serial, params?: DeleteMessageParams): Promise<Message>;
    /**
     * @inheritdoc Messages
     */
    update(serial: Serial, updateParams: UpdateMessageParams, details?: OperationDetails): Promise<Message>;
    /**
     * @inheritdoc Messages
     */
    subscribe(listener: MessageListener): MessageSubscriptionResponse;
    private _processEvent;
    /**
     * Validate the realtime message and convert it to a chat message.
     */
    private _parseNewMessage;
}
