import { ErrorInfo } from 'ably';
import { Presence, PresenceData } from '../../core/presence.js';
import { ChatStatusResponse } from '../types/chat-status-response.js';
import { StatusParams } from '../types/status-params.js';
/**
 * The options for the {@link usePresence} hook.
 */
export interface UsePresenceParams extends StatusParams {
    /**
     * The data to enter the room with. Any JSON serializable data can be provided.
     */
    enterWithData?: PresenceData;
    /**
     * The data to leave the room with. Any JSON serializable data can be provided.
     */
    leaveWithData?: PresenceData;
}
export interface UsePresenceResponse extends ChatStatusResponse {
    /**
     * A shortcut to the {@link Presence.update} method.
     */
    readonly update: Presence['update'];
    /**
     * Provides access to the underlying {@link Presence} instance of the room.
     */
    readonly presence?: Presence;
    /**
     * Indicates whether the current user is present in the room.
     */
    readonly isPresent: boolean;
    /**
     * Indicates if an error occurred while entering or leaving the room.
     */
    readonly error?: ErrorInfo;
}
/**
 * A hook that provides access to the {@link Presence} instance in the room.
 * It will use the instance belonging to the room in the nearest {@link ChatRoomProvider} in the component tree.
 * On calling, the hook will `enter` the room with the provided data and `leave` the room when the component unmounts.
 * The {@link UsePresenceResponse.isPresent} flag will indicate when the user has become present in the room.
 *
 * @param params - Allows the registering of optional callbacks.
 * @returns UsePresenceResponse - An object containing the {@link Presence} instance and methods to interact with it.
 */
export declare const usePresence: (params?: UsePresenceParams) => UsePresenceResponse;
