import { ChannelOptionsMerger } from './channel-manager.js';
import { ChatApi } from './chat-api.js';
import { MessageReactionRawEvent, MessageReactionSummaryEvent, MessageReactionType } from './events.js';
import { Logger } from './logger.js';
import { InternalRoomOptions, MessageOptions } from './room-options.js';
import { Serial } from './serial.js';
import { Subscription } from './subscription.js';
import * as Ably from 'ably';
/**
 * A listener for summary message reaction events.
 * @param event The message reaction summary event that was received. Use it
 *   with {@link Message.with} to keep an up-to-date reaction count.
 */
export type MessageReactionListener = (event: MessageReactionSummaryEvent) => void;
/**
 * A listener for individual message reaction events.
 * @param event The message reaction event that was received.
 */
export type MessageRawReactionListener = (event: MessageReactionRawEvent) => void;
/**
 * Parameters for adding a message reaction.
 */
export interface AddMessageReactionParams {
    /**
     * The reaction name to add; ie. the emoji.
     */
    name: string;
    /**
     * The type of reaction, must be one of {@link MessageReactionType}.
     * If not set, the default type will be used which is configured in the {@link MessageOptions.defaultMessageReactionType} of the room.
     */
    type?: MessageReactionType;
    /**
     * The count of the reaction for type {@link MessageReactionType.Multiple}.
     * Defaults to 1 if not set. Not supported for other reaction types.
     * @default 1
     */
    count?: number;
}
/**
 * Parameters for deleting a message reaction.
 */
export interface DeleteMessageReactionParams {
    /**
     * The reaction name to delete; ie. the emoji. Required for all reaction types
     * except {@link MessageReactionType.Unique}.
     */
    name?: string;
    /**
     * The type of reaction, must be one of {@link MessageReactionType}.
     * If not set, the default type will be used which is configured in the {@link MessageOptions.defaultMessageReactionType} of the room.
     */
    type?: MessageReactionType;
}
/**
 * Add, delete, and subscribe to message reactions.
 */
export interface MessagesReactions {
    /**
     * Add a message reactions
     * @param messageSerial The serial of the message to react to
     * @param params Describe the reaction to add.
     * @returns A promise that resolves when the reaction is added.
     */
    send(messageSerial: Serial, params: AddMessageReactionParams): Promise<void>;
    /**
     * Delete a message reaction
     * @param messageSerial The serial of the message to remove the reaction from.
     * @param params The type of reaction annotation and the specific reaction to remove. The reaction to remove is required for all types except {@link MessageReactionType.Unique}.
     * @returns A promise that resolves when the reaction is deleted.
     */
    delete(messageSerial: Serial, params?: DeleteMessageReactionParams): Promise<void>;
    /**
     * Subscribe to message reaction summaries. Use this to keep message reaction
     * counts up to date efficiently in the UI.
     * @param listener The listener to call when a message reaction summary is received.
     * @returns A subscription object that should be used to unsubscribe.
     */
    subscribe(listener: MessageReactionListener): Subscription;
    /**
     * Subscribe to individual reaction events.
     * @remarks If you only need to keep track of reaction counts and clients, use
     *  {@link subscribe} instead.
     * @param listener The listener to call when a message reaction event is received.
     * @returns A subscription object that should be used to unsubscribe.
     */
    subscribeRaw(listener: MessageRawReactionListener): Subscription;
}
/**
 * @inheritDoc
 */
export declare class DefaultMessageReactions implements MessagesReactions {
    private readonly _logger;
    private readonly _options;
    private readonly _api;
    private readonly _roomName;
    private readonly _channel;
    private _emitter;
    private readonly _defaultType;
    constructor(_logger: Logger, _options: MessageOptions | undefined, _api: ChatApi, _roomName: string, _channel: Ably.RealtimeChannel);
    private _processAnnotationEvent;
    private _processMessageEvent;
    /**
     * @inheritDoc
     */
    send(messageSerial: Serial, params: AddMessageReactionParams): Promise<void>;
    /**
     * @inheritDoc
     */
    delete(messageSerial: Serial, params?: DeleteMessageReactionParams): Promise<void>;
    /**
     * @inheritDoc
     */
    subscribe(listener: MessageReactionListener): Subscription;
    /**
     * @inheritDoc
     */
    subscribeRaw(listener: MessageRawReactionListener): Subscription;
    /**
     * Merges the channel options to add support for message reactions.
     *
     * @param roomOptions The room options to merge for.
     * @returns A function that merges the channel options for the room with the ones required for presence.
     */
    static channelOptionMerger(roomOptions: InternalRoomOptions): ChannelOptionsMerger;
}
