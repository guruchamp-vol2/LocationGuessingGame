import { ChannelOptionsMerger } from './channel-manager.js';
import { ChatApi } from './chat-api.js';
import { OccupancyEvent } from './events.js';
import { Logger } from './logger.js';
import { InternalRoomOptions } from './room-options.js';
import { Subscription } from './subscription.js';
import * as Ably from 'ably';
/**
 * This interface is used to interact with occupancy in a chat room: subscribing to occupancy updates and
 * fetching the current room occupancy metrics.
 *
 * Get an instance via {@link Room.occupancy}.
 */
export interface Occupancy {
    /**
     * Subscribe a given listener to occupancy updates of the chat room.
     *
     * Note: This requires occupancy events to be enabled via the `enableEvents` option in
     * the {@link OccupancyOptions} options provided to the room. If this is not enabled, an error will be thrown.
     *
     * @param listener A listener to be called when the occupancy of the room changes.
     * @returns A subscription object that can be used to unsubscribe the listener.
     * @throws {Ably.ErrorInfo} If occupancy events are not enabled for this room.
     */
    subscribe(listener: OccupancyListener): Subscription;
    /**
     * Get the current occupancy of the chat room.
     *
     * @returns A promise that resolves to the current occupancy of the chat room.
     */
    get(): Promise<OccupancyData>;
    /**
     * Get the latest occupancy data received from realtime events.
     *
     * @returns The latest occupancy data, or undefined if no realtime events have been received yet.
     * @throws {Ably.ErrorInfo} If occupancy events are not enabled for this room.
     */
    current(): OccupancyData | undefined;
}
/**
 * Represents the occupancy data of a chat room.
 */
export interface OccupancyData {
    /**
     * The number of connections to the chat room.
     */
    connections: number;
    /**
     * The number of presence members in the chat room - members who have entered presence.
     */
    presenceMembers: number;
}
/**
 * A listener that is called when the occupancy of a chat room changes.
 * @param event The occupancy event.
 */
export type OccupancyListener = (event: OccupancyEvent) => void;
/**
 * @inheritDoc
 */
export declare class DefaultOccupancy implements Occupancy {
    private readonly _roomName;
    private readonly _channel;
    private readonly _chatApi;
    private readonly _logger;
    private readonly _emitter;
    private readonly _roomOptions;
    private _latestOccupancyData?;
    /**
     * Constructs a new `DefaultOccupancy` instance.
     * @param roomName The unique identifier of the room.
     * @param channel An instance of the Realtime channel.
     * @param chatApi An instance of the ChatApi.
     * @param logger An instance of the Logger.
     * @param roomOptions The room options.
     */
    constructor(roomName: string, channel: Ably.RealtimeChannel, chatApi: ChatApi, logger: Logger, roomOptions: InternalRoomOptions);
    /**
     * Sets up channel subscriptions for occupancy.
     */
    private _applyChannelSubscriptions;
    /**
     * @inheritdoc Occupancy
     */
    subscribe(listener: OccupancyListener): Subscription;
    /**
     * @inheritdoc Occupancy
     */
    get(): Promise<OccupancyData>;
    /**
     * @inheritdoc Occupancy
     */
    current(): OccupancyData | undefined;
    /**
     * An internal listener that listens for occupancy events from the underlying channel and translates them into
     * occupancy events for the public API.
     */
    private _internalOccupancyListener;
    /**
     * Merges the channel options for the room with the ones required for occupancy.
     *
     * @returns A function that merges the channel options for the room with the ones required for occupancy.
     */
    static channelOptionMerger(roomOptions: InternalRoomOptions): ChannelOptionsMerger;
}
