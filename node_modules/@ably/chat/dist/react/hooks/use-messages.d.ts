import { MessageListener, Messages, MessageSubscriptionResponse } from '../../core/messages.js';
import { MessageRawReactionListener, MessageReactionListener } from '../../core/messages-reactions.js';
import { ChatStatusResponse } from '../types/chat-status-response.js';
import { Listenable } from '../types/listenable.js';
import { StatusParams } from '../types/status-params.js';
/**
 * The response from the {@link useMessages} hook.
 */
export interface UseMessagesResponse extends ChatStatusResponse {
    /**
     * A shortcut to the {@link Messages.send} method.
     */
    readonly send: Messages['send'];
    /**
     * A shortcut to the {@link Messages.update} method.
     */
    readonly update: Messages['update'];
    /**
     * A shortcut to the {@link Messages.history} method.
     */
    readonly history: Messages['history'];
    /**
     * A shortcut to the {@link Messages.delete} method.
     */
    readonly deleteMessage: Messages['delete'];
    /**
     * A shortcut to the {@link MessagesReactions.send} method.
     */
    readonly sendReaction: Messages['reactions']['send'];
    /**
     * A shortcut to the {@link MessagesReactions.delete} method.
     */
    readonly deleteReaction: Messages['reactions']['delete'];
    /**
     * Provides access to the underlying {@link Messages} instance of the room.
     */
    readonly messages?: Messages;
    /**
     * Retrieves the previous messages in the room.
     *
     * This method is available only if a {@link MessageListener} has been provided in the {@link UseMessagesParams}.
     * Calling will return a promise that resolves to a paginated response of the previous messages received in the room,
     * up until the listener was attached, in newest-to-oldest order.
     *
     * It is advised to call this method after any discontinuity event; to retrieve messages that may have been missed
     * before the listener was re-attached.
     *
     * This is removed when the component unmounts or when the previously provided listener is removed.
     *
     * @param options - The query options to use when fetching the previous messages.
     *
     * @defaultValue - This will be undefined if no listener is provided in the {@link UseMessagesParams}.
     */
    readonly historyBeforeSubscribe?: MessageSubscriptionResponse['historyBeforeSubscribe'];
}
export interface UseMessagesParams extends StatusParams, Listenable<MessageListener> {
    /**
     * An optional listener that can be provided to receive new messages in the room.
     * The listener is removed when the component unmounts.
     */
    listener?: MessageListener;
    /**
     * An optional listener that can be provided to receive reaction summaries to
     * messages in the room. The listener is removed when the component unmounts.
     */
    reactionsListener?: MessageReactionListener;
    /**
     * An optional listener that can be provided to receive individual reactions
     * to messages in the room. The listener is removed when the component
     * unmounts.
     */
    rawReactionsListener?: MessageRawReactionListener;
}
/**
 * A hook that provides access to the {@link Messages} instance in the room.
 * It will use the instance belonging to the room in the nearest {@link ChatRoomProvider} in the component tree.
 * If a listener is provided, it will subscribe to new messages in the room,
 * and will also set the {@link UseMessagesResponse.historyBeforeSubscribe}.
 *
 * @param params - Allows the registering of optional callbacks.
 * @returns UsePresenceResponse - An object containing the {@link Messages} instance and methods to interact with it.
 */
export declare const useMessages: (params?: UseMessagesParams) => UseMessagesResponse;
