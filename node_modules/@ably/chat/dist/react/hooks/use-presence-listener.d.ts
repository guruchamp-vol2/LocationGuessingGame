import { Presence, PresenceListener, PresenceMember } from '../../core/presence.js';
import { ChatStatusResponse } from '../types/chat-status-response.js';
import { Listenable } from '../types/listenable.js';
import { StatusParams } from '../types/status-params.js';
import * as Ably from 'ably';
/**
 * The options for the {@link usePresenceListener} hook.
 */
export interface UsePresenceListenerParams extends StatusParams, Listenable<PresenceListener> {
    /**
     * The listener to be called when the presence state changes.
     * The listener is removed when the component unmounts.
     */
    listener?: PresenceListener;
}
export interface UsePresenceListenerResponse extends ChatStatusResponse {
    /**
     * The current state of all the presence members, observed as a whole change, and only emitted while presence is not syncing.
     */
    readonly presenceData: PresenceMember[];
    /**
     * Provides access to the underlying {@link Presence} instance of the room.
     */
    readonly presence?: Presence;
    /**
     * The error state of the presence listener.
     * The hook keeps {@link presenceData} up to date asynchronously, so this error state is provided to allow
     * the user to handle errors that may occur when fetching presence data.
     * It will be set if there is an error fetching the initial presence data,
     * or if there is an error when fetching presence data after a presence event.
     * The error will be cleared once a new presence event is received and successfully processed.
     */
    readonly error?: Ably.ErrorInfo;
}
/**
 * A hook that provides access to the {@link Presence} instance in the room and the current presence state.
 * It will use the instance belonging to the room in the nearest {@link ChatRoomProvider} in the component tree.
 * On calling, the hook will subscribe to the presence state of the room and update the state accordingly.
 *
 * @param params - Allows the registering of optional callbacks.
 * @returns UsePresenceResponse - An object containing the {@link Presence} instance and the current presence state.
 */
export declare const usePresenceListener: (params?: UsePresenceListenerParams) => UsePresenceListenerResponse;
