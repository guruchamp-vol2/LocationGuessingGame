import { TypingSetEvent } from '../../core/events.js';
import { Typing, TypingListener } from '../../core/typing.js';
import { ChatStatusResponse } from '../types/chat-status-response.js';
import { Listenable } from '../types/listenable.js';
import { StatusParams } from '../types/status-params.js';
import * as Ably from 'ably';
/**
 * The parameters for the {@link useTyping} hook.
 */
export interface TypingParams extends StatusParams, Listenable<TypingListener> {
    /**
     * A listener that will be called whenever a typing event is sent to the room.
     * The listener is removed when the component unmounts.
     *
     */
    listener?: TypingListener;
}
export interface UseTypingResponse extends ChatStatusResponse {
    /**
     * A shortcut to the {@link Typing.keystroke} method.
     */
    readonly keystroke: Typing['keystroke'];
    /**
     * A shortcut to the {@link Typing.stop} method.
     */
    readonly stop: Typing['stop'];
    /**
     * A state value representing the set of client IDs that are currently typing in the room.
     * It automatically updates based on typing events received from the room.
     */
    readonly currentlyTyping: TypingSetEvent['currentlyTyping'];
    /**
     * Provides access to the underlying {@link Typing} instance of the room.
     */
    readonly typingIndicators?: Typing;
    /**
     * A state value representing the current error state of the hook, this will be an instance of {@link Ably.ErrorInfo} or `undefined`.
     * An error can occur during mount when initially fetching the current typing state; this does not mean that further
     * updates will not be received, and so the hook might recover from this state on its own.
     */
    readonly error?: Ably.ErrorInfo;
}
/**
 * A hook that provides access to the {@link Typing} instance in the room.
 * It will use the instance belonging to the room in the nearest {@link ChatRoomProvider} in the component tree.
 *
 * @param params - Allows the registering of optional callbacks.
 * @returns UseTypingResponse - An object containing the {@link Typing} instance and methods to interact with it.
 */
export declare const useTyping: (params?: TypingParams) => UseTypingResponse;
