import { default as React, ReactNode } from 'react';
import { RoomOptions } from '../../core/room-options.js';
/**
 * Props for the {@link ChatRoomProvider} component.
 */
export interface ChatRoomProviderProps {
    /** The name of the room. */
    name: string;
    /**
     * Overriding options to use when creating the room.
     *
     * NOTE: This value is not memoized by the provider. It must be memoized in your component to prevent
     * re-renders of a parent component from causing the room to be recreated.
     */
    options?: RoomOptions;
    /**
     * Set to `false` to disable auto-releasing the room when component unmounts,
     * to support multiple {@link ChatRoomProvider}s for the same room.
     *
     * If set to `false`, you must manually release the room using
     * `chatClient.rooms.release(id)` or have another {@link ChatRoomProvider} for
     * the same room and {@link release} set to `true`.
     *
     * @defaultValue `true`
     */
    release?: boolean;
    /**
     * Set to `false` to disable auto-attaching the room when component mounts
     * and auto-detaching when it unmounts.
     *
     * If set to `false`, you must manually attach and detach the room using
     * `room.attach()` and `room.detach()` or the provided shortcut functions
     * that {@link useRoom} provides.
     * Setting this flag to `false` is useful in the case where you have more providers for the same room,
     * and you need to control the attachment manually or by choosing which provider handles it.
     *
     * @defaultValue `true`
     */
    attach?: boolean;
    /** Children nodes. */
    children?: ReactNode | ReactNode[] | null;
}
/**
 * Provider for a {@link Room}. Must be wrapped in a {@link ChatClientProvider}.
 *
 * See {@link ChatRoomProviderProps} for the available props and configuring the
 * provider to automatically attach, detach and/or release the room.
 */
export declare const ChatRoomProvider: React.FC<ChatRoomProviderProps>;
